using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

using Avro;
using Avro.IO;
using Avro.Generic;

//for ADO.NET
using InterSystems.Data.IRISClient;

//for NAtive API
using InterSystems.Data.IRISClient.ADO;

namespace adonet
{
    class Program
    {
        static void Main(string[] args)
        {
         
            dc.GenericList<int> list1 = new dc.GenericList<int>();
            list1.Add(1);

            // Declare a list of type string.
            dc.GenericList<string> list2 = new dc.GenericList<string>();
            list2.Add("abc");

            // Declare a list of type ExampleClass.
            dc.GenericList<dc.MyLibrary> list3 = new dc.GenericList<dc.MyLibrary>();
            list3.Add(new dc.MyLibrary());

            
            dc.MyLibrary my = new dc.MyLibrary();
            try {
                IRISObject msg = my.GetEnsLibMQTT(1);
                byte[] b = msg.GetBytes("StringValue");
                MemoryStream myms = new MemoryStream();
                myms.Write(b, 0, b.Length);
                myms.Position = 0;
                // may garble your console...
                Console.WriteLine((new System.IO.StreamReader(myms)).ReadToEnd());
            }
            catch (Exception e) {
                Console.WriteLine("No EnsLib.MQTT.Message found.");
                Console.WriteLine(e.Source);
            }

            string schema="[{\"type\": \"array\", \"items\": \"string\"}, \"string\"]";
            string[] value = new string[] { "a", "b" };
            //test<string[]>(schema, value);

            Schema ws;
            MemoryStream ms = new MemoryStream();
            Encoder enc = new BinaryEncoder(ms);
            ws = Schema.Parse(schema);
            GenericWriter<string[]> w = new GenericWriter<string[]>(ws);
            // write twice so we can validate reading twice
            w.Write(value, enc);
            ms.Flush();
            ms.Position = 0;


            Schema rs;
            long initialPos = ms.Position;
            rs = Schema.Parse(schema);
            GenericReader<string[]> r = new GenericReader<string[]>(ws, rs);
            Decoder d = new BinaryDecoder(ms);
            var items = new List<string[]>();
            // validate reading twice to make sure there isn't some state that isn't reset between reads.

            //items.Add( Read( r, d ) );
            string[] reuse = default( string[] );
            Console.WriteLine("Now Read");
            r.Read( reuse, d );

            //items.Add( Read( r, d ) );
            Console.WriteLine(items[0]);

            //IRISObject input = my.DoSomethingNative("MyTopic", "MyData");
            //IRISObject input2 = my.DoSomethingSQL("MyTopic", "MyData");

            Console.WriteLine("Hit any key");
            Console.ReadLine();

        }

        // from https://github.com/apache/avro/blob/master/lang/csharp/src/apache/test/Generic/GenericTests.cs

      private static void test<T>(string s, T value)
        {
            Stream ms;
            Schema ws;
            serialize(s, value, out ms, out ws);
            Schema rs = Schema.Parse(s);
            T output = deserialize<T>(ms, ws, rs);
        }

        private static S deserialize<S>(Stream ms, Schema ws, Schema rs)
        {
            long initialPos = ms.Position;
            GenericReader<S> r = new GenericReader<S>(ws, rs);
            Decoder d = new BinaryDecoder(ms);
            var items = new List<S>();
            // validate reading twice to make sure there isn't some state that isn't reset between reads.
            items.Add( Read( r, d ) );
            items.Add( Read( r, d ) );
            checkAlternateDeserializers(items, ms, initialPos, ws, rs);
            return items[0];
        }

        private static S Read<S>( DatumReader<S> reader, Decoder d )
        {
            Console.WriteLine("Now default");
            S reuse = default( S );
            Console.WriteLine("Now Read");
            return reader.Read( reuse, d );
        }

        private static void checkAlternateDeserializers<S>(IEnumerable<S> expectations, Stream input, long startPos, Schema ws, Schema rs)
        {
            input.Position = startPos;
            var reader = new GenericDatumReader<S>(ws, rs);
            Decoder d = new BinaryDecoder(input);
            foreach( var expected in expectations )
            {
                var read = Read( reader, d );
            }
        }

        private static void serialize<T>(string writerSchema, T actual, out Stream stream, out Schema ws)
        {
            var ms = new MemoryStream();
            Encoder e = new BinaryEncoder(ms);
            ws = Schema.Parse(writerSchema);
            GenericWriter<T> w = new GenericWriter<T>(ws);
            // write twice so we can validate reading twice
            w.Write(actual, e);
            w.Write(actual, e);
            ms.Flush();
            ms.Position = 0;
            checkAlternateSerializers(ms.ToArray(), actual, ws);
            stream = ms;
        }
        private static void checkAlternateSerializers<T>(byte[] expected, T value, Schema ws)
        {
            var ms = new MemoryStream();
            var writer = new GenericDatumWriter<T>(ws);
            var e = new BinaryEncoder(ms);
            writer.Write(value, e);
            writer.Write(value, e);
            var output = ms.ToArray();

        }
    }


}
